//created on: Jun 6, 2017
package com.eds.rules

//list any import classes here.
import com.eds.model.risk_pattern.*;
import com.eds.EDS_Library.diagram.Process;
import com.eds.EDS_Library.diagram.Element;
import com.eds.EDS_Library.diagram.Diagram.Flows.Http;
import com.eds.EDS_Library.diagram.Diagram.Elements.Browser;
import com.eds.EDS_Library.diagram.*;
import com.eds.model.risk_pattern.ExploitOfAsset;
import java.util.List;

//declare any global variables here


rule "Asset:_Session_Cookie"
    when
     	DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.assetId == "as_sessioncookie"               
    then
        drools.setFocus("sc_check_request");
end

rule "SC_Request:_Check_Resource_Aspects"
	agenda-group "sc_check_request"
    when
     	DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectConfidentiality == true or
     	Boolean(booleanValue == true) from $value.protectAvailability == true or
     	Boolean(booleanValue == true) from $value.protectIntegrity == true
     then
        drools.setFocus("sc_check_primary");
end

/* *************** CHECK EXPLOITS		 ****************/
rule "SC:_Check_Confidentiality"
	agenda-group "sc_check_primary"		// SNIFFING postoji uvek kada barem jedan element u transportu ne enkriptuje podatke
    when
     	pattern : DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectConfidentiality == true 
     	
     	DiagramPattern($list3 : assetsOnTraceStart)  
     	$value3 : AssetDefinition() from $list3
     	Boolean(booleanValue == true) from $value3.assetId == "as_sessioncookie"  
     	    
     	DiagramPattern($list2 : trace)
     	elementInTrace : Element() from $list2
     	DiagramPattern(elementInTrace instanceof Http) 
    then
        pattern.addExploitAndAsset(new ExploitOfAsset("ed_sniffing", "as_sessioncookie"));
end

rule "SC:_Check_Confidentiality_for_Session_Hijack"
	agenda-group "sc_check_primary"		// ako je prenos podataka otvoren, mogu se procitati kredencijali ili cookie, pomocu cega se moze ukrasi sesija
    when								// nije ukljuceno u prethodno pravilo, posto ono zahteva da se stiti confidentality
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list
     	DiagramPattern(elementInTrace instanceof Http) 
     	
     	DiagramPattern($list3 : assetsOnTraceStart)  
     	$value3 : AssetDefinition() from $list3
     	Boolean(booleanValue == true) from $value3.assetId == "as_sessioncookie"  
    then
        pattern.addExploitAndAsset(new ExploitOfAsset("ed_sessionhijack", "as_sessioncookie"));
end

rule "SC:_Check_process"
	agenda-group "sc_check_primary"
    when
        DiagramPattern(element instanceof Process)                    
    then
        drools.setFocus("sc_process");
end

rule "SC:_Check_external"
	agenda-group "sc_check_primary"
    when
        pattern : DiagramPattern(element instanceof ExternalEntity)                    
    then
        drools.setFocus("sc_external");
end

rule "SC:_Check_datastore"
	agenda-group "sc_check_primary"
    when
        DiagramPattern(element instanceof DataStore)                    
    then
        drools.setFocus("sc_datastore");
end

rule "SC:_Check_external_browser"
	agenda-group "sc_check_primary"
    when
        pattern : DiagramPattern(element instanceof Browser)  
     	Boolean(booleanValue == true) from pattern.traceStart instanceof Process
    then
        pattern.addExploitAndAsset(new ExploitOfAsset("ed_xss", "as_sessioncookie"));	// pretpostavimo da XSS postoji svaki put kada podaci idu od procesa ka Ext.Ent.
        drools.setFocus("sc_external_check_xss");
end


rule "SC_External:_Process_XSS"
	agenda-group "sc_external_check_xss"
    when
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list
     	Boolean(booleanValue == true) from elementInTrace instanceof Process
     	Boolean(booleanValue == true) from ((Process)elementInTrace).sanitizeOutput == true
    then
        pattern.removeExploitAndAsset(new ExploitOfAsset("ed_xss", "as_sessioncookie"));
end


rule "SC_Process:_Session_Timeout1"	// ako se sesija ne tajmautuje, moguce je pogoditi njen ID pa ga iskoristiti
	agenda-group "sc_process"
    when
     	pattern : DiagramPattern()
		Boolean(booleanValue == true) from ((Process)pattern.element).sessionHasTimeouts == false
		Boolean(booleanValue == true) from pattern.traceStart == null
    then
        pattern.addExploitAndAsset(new ExploitOfAsset("ed_sessionhijack", "as_sessioncookie"));
end

